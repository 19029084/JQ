package com.jq.security;

import com.jq.entity.JQUser;
import com.jq.entity.JQRole;

import com.jq.security.repository.JQUserRepository;



import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.security.core.GrantedAuthority;
import org.springframework.security.core.authority.SimpleGrantedAuthority;
import org.springframework.security.core.userdetails.User;
import org.springframework.security.core.userdetails.UserDetails;
import org.springframework.security.core.userdetails.UserDetailsService;
import org.springframework.security.core.userdetails.UsernameNotFoundException;

import org.springframework.stereotype.Service;
//import org.springframework.transaction.annotion.Transactional;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import java.util.ArrayList;
import java.util.Collection;





@Service
public class JQUserDetailsService implements UserDetailsService {
    private static final Logger logger = LoggerFactory.getLogger(JQUserDetailsService.class);

    //@Autowired
    //private MemberRepository memberRepository;
    @Autowired
    private JQUserRepository jqUserRepository;

    @Override
    public UserDetails loadUserByUsername(String username) throws UsernameNotFoundException {
    	System.out.println("loadUserByUsername");
        logger.info("用户的用户名: {}", username);
        String lowerCaseLogin = username.toLowerCase();
        
        JQUser jqUser=jqUserRepository.findByUsernameCaseInsensitive(lowerCaseLogin);
        if(jqUser==null){
            throw new UsernameNotFoundException("User"+username+"was not found in the database");
        }
        Collection<GrantedAuthority> grantedAuthorities=new ArrayList<>();
        for(JQRole role:jqUser.getRoles()){
            GrantedAuthority grantedAuthority=new SimpleGrantedAuthority(role.getName());
            grantedAuthorities.add(grantedAuthority);
        }
        return new User(jqUser.getUsername(),jqUser.getPassword(),grantedAuthorities);
        /*String clientFlagValue;
        String name;
        try {
            // username 使用客户端ID凭借 == clientId:username
            String[] split = username.split(":");
            clientFlagValue = split[0];
            name = split[1];
        } catch (Exception e) {
            log.error("用户名请拼接资源服务标识");
            return null;
        }
        
        MyUserDetails userDetails = new MyUserDetails();
        userDetails.setUsername(username);
        // 根据标识区分具体的客户端
        OauthClientFlagEnum clientFlagEnum = OauthClientFlagEnum.build(clientFlagValue);
        switch (clientFlagEnum) {
        case VUE_WEB:
            User user = userRepository.oneByName(name);
            if (user == null) {
                throw new UsernameNotFoundException(String.format("User %s does not exist!", username));
            }
            userDetails.setUserId(user.getId().toString());
            userDetails.setPassword(user.getPassword());
            break;
        case MEMBER_API:
            Member member = memberRepository.oneByPhone(name);
            if (member == null) {
                throw new UsernameNotFoundException(String.format("User %s does not exist!", username));
            }
            userDetails.setUserId(member.getId().toString());
            userDetails.setPassword(member.getPassword());
            break;
        default:
            log.error("用户名请拼接资源服务标识==clientFlagValue:{}", clientFlagValue);
            return null;
        }
        return userDetails;*/
    }
    /**
     *  *用于存储用户信息
     */
   /* @Data
    private final static class JQUserDetails implements UserDetails {
        private static final long serialVersionUID = 1L;
        private String username;
        private String password;
        private String userId;
        private JQUserDetails() {
            super();
        }
        @Override
        public Collection<? extends GrantedAuthority> getAuthorities() {
            Role role = new Role();
            return role.getRoles();
        }
        @Override
        public boolean isAccountNonExpired() {
            return true;
        }
        @Override
        public boolean isAccountNonLocked() {
            return true;
        }
        @Override
        public boolean isCredentialsNonExpired() {
            return true;
        }
        @Override
        public boolean isEnabled() {
            return true;
        }
    }*/
}
